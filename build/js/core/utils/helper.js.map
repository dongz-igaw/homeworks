{"version":3,"sources":["../../../../src/js/core/utils/helper.js"],"names":["define","model","Helper","context","data","randomString","length","seed","split","idx","push","Math","floor","random","join","promise","name","callback","time","invoke","self","format","id","PROMISE","framework","setTimeout","e","log","stack","clearTimeout","message","code","_debug","template","console","error","parseTemplate","key","map","mapping","getIdentifier","replace","id_arr","toUpperCase","concat","splice","bind","element","type","initialize","forms","toString","event","value","$","extend","apply","Array","prototype","slice","call","arguments","triggerHandler","_init","exception","unbind","trigger"],"mappings":"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","file":"helper.js","sourcesContent":["/**\r\n * A module representing a Helper.\r\n * @module core/utils/helper\r\n */\r\ndefine(['../models/index'], (model) => {\r\n    /**\r\n     * @constructor\r\n     * @alias module:core/utils/helper\r\n     * @description HOMEWORKS Helper constructor, This is helping to treat DOM Elements or JS operators.\r\n     * @see Refer an example document {@link https://kennethanceyer.gitbooks.io/homeworks-framework-wiki/content/DEVELOPMENT/ComponentHelper.html|here}.\r\n     * @author Kenneth <kenneth@igaworks.com>\r\n     * @param {Method} context - HOMEWORKS Method Context.\r\n     * @param {ComponentData.store} data - HOMEWORKS ComponentData store for get unique id.\r\n     * @returns {Helper}\r\n     */\r\n    const Helper = function(context, data) {\r\n        /*=================================================\r\n         *= NOTE - HOMEWORKS Component shared feature.\r\n         *= DATE - 2016-01-19\r\n         *================================================*/\r\n\r\n         /**\r\n         * @function\r\n         * @description Get random string that made 0-9 numbers, lower/upper case alphabets.\r\n         * @param {Number} length - Random string length.\r\n         * @returns {String} Random string.\r\n         */\r\n        this.randomString = function(length) {\r\n            length = length || 10;\r\n            var seed = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\r\n            var randomString = [];\r\n            for(var idx=0; idx<length; idx++) {\r\n                randomString.push(seed[Math.floor(Math.random() * seed.length)]);\r\n            }\r\n            return randomString.join('');\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description Promiss is helping to make a schedule, It is similar like setTimeout.\r\n         * @param {String} name - Promiss name for control.\r\n         * @param {Function} callback - The callback when promiss is done.\r\n         * @param {Number} time - A millisecond time for promiss.\r\n         * @param {Function} invoke - The callback when invoke request be received.\r\n         * @returns {Number} setTimeout number.\r\n         */\r\n        this.promise = function (name, callback, time, invoke) {\r\n            var self = this;\r\n            if (typeof name === 'function' && typeof callback === 'number') {\r\n                time = callback;\r\n                callback = name;\r\n                name = '{0}_{1}'.format([context.id, this.randomString(8)]);\r\n            }\r\n\r\n            if (typeof invoke !== 'undefined' && invoke === true) {\r\n                this.invoke(name);\r\n            }\r\n\r\n            model.PROMISE[context.framework + '.' + name] = setTimeout(function () {\r\n                try {\r\n                    delete model.PROMISE[context.framework + '.' + name];\r\n                } catch (e) {\r\n                    self.log(e.stack);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback();\r\n                }\r\n            }, time);\r\n\r\n            return name;\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description This function will invoke promiss request that you created before.\r\n         * @param {String} name - Promiss name for invoke a request.\r\n         * @param {Function} callback - The callback when promiss is done.\r\n         * @param {Number} time - A millisecond time for promiss.\r\n         * @param {Function} invoke - The callback when invoke request be received.\r\n         * @returns {Boolean}\r\n         */\r\n        this.invoke = function (name) {\r\n            if (typeof name === 'undefined' || name === null) {\r\n                name = context.id;\r\n            }\r\n\r\n            if (typeof model.PROMISE[context.framework + '.' + name] !== 'undefined') {\r\n                try {\r\n                    clearTimeout(model.PROMISE[context.framework + '.' + name]);\r\n                    delete model.PROMISE[context.framework + '.' + name];\r\n                } catch (e) {\r\n                    self.log(e.stack);\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description The logger of HOMEWORKS Frameworks, Use this instead console.log.\r\n         * @param {String} message - String error message or Exception object.\r\n         * @param {String} code - Error code or number.\r\n         * @returns {undefined}\r\n         */\r\n        this.log = function (message, code) {\r\n            if (context._debug === true) {\r\n                var template = message;\r\n\r\n                if (typeof message !== 'undefined' && typeof message.stack !== 'undefined') {\r\n                    console.error(message.stack);\r\n                } else {\r\n                    if (typeof code !== 'undefined' && code !== null) {\r\n                        template = '[' + code + '] ' + template;\r\n                    }\r\n\r\n                    console.error(template);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description This function find template that you declared on Method's templates array, and than replace it using a key what you gave.\r\n         * @param {String} key - The template key.\r\n         * @param {Object} map - The template object.\r\n         * @returns {String}\r\n         */\r\n        this.parseTemplate = function (key, map) {\r\n            var data = context.template[key];\r\n            if (typeof data === 'undefined') {\r\n                this.log(\"'\" + key + \"' 이름의 템플릿이 확인되지 않습니다.\");\r\n                return false;\r\n            }\r\n            return data.mapping(map);\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description You can get unique id for set each of component by using this function.\r\n         * @returns {String}\r\n         */\r\n        this.getIdentifier = function () {\r\n            var id = data.id.replace(/,?\\s/g, '-');\r\n            var id_arr = id.split('');\r\n            id = [id_arr[0].toUpperCase()].concat(id_arr.splice(1, id.length)).join('');\r\n            return data.framework + id;\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description It will attach an event to your element, Use this function instead jQuery.bind.\r\n         * @param {jQuery} element - jQuery object for attach event.\r\n         * @param {String} type - Event type name.\r\n         * @param {Function} callback - The callback function which fired when event triggered.\r\n         * @param {Boolean} initialize - If this parameter is true, The event is triggered once automatically.\r\n         * @returns {undefined}\r\n         */\r\n        this.bind = function (element, type, callback, initialize) {\r\n            try {\r\n                var forms = type.toString().split(' ');\r\n                for (var name in forms) {\r\n                    forms[name] = forms[name] + '.' + this.getIdentifier();\r\n                }\r\n\r\n                forms = forms.join(' ');\r\n\r\n                element.bind(forms, function (event, value) {\r\n                    if (typeof value === 'object') {\r\n                        $.extend(event, value);\r\n                    }\r\n\r\n                    if (typeof callback === 'function') {\r\n                        callback.apply(this, Array.prototype.slice.call(arguments));\r\n                    }\r\n                });\r\n\r\n                if (typeof initialize !== 'undefined' && initialize === true) {\r\n                    this.triggerHandler(element, type, {\r\n                        _init: true\r\n                    });\r\n                }\r\n            } catch (exception) {\r\n                this.log(exception);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description Deattach event from the jQuery object, Use this function instead jQuery.unbind.\r\n         * @param {jQuery} element - jQuery object for deattach event.\r\n         * @param {String} type - Event type name.\r\n         * @returns {undefined}\r\n         */\r\n        this.unbind = function (element, type) {\r\n            element.unbind(type + '.' + this.getIdentifier());\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description This function will trigger an event, Use this function instead jQuery.trigger.\r\n         * @param {jQuery} element - jQuery object for trigger event.\r\n         * @param {String} type - Event type name.\r\n         * @param {Any} value - Extra values for sending the binder function.\r\n         * @returns {undefined}\r\n         */\r\n        this.trigger = function (element, type, value) {\r\n            var forms = (type.toString().split(' '))[0];\r\n            element.trigger(value === true ? forms : (forms + '.' + this.getIdentifier()), value);\r\n        };\r\n\r\n        /**\r\n         * @function\r\n         * @description This function will trigger an event \"only logically\", Use this function instead jQuery.triggerHandler.\r\n         * @param {jQuery} element - jQuery object for trigger event logically.\r\n         * @param {String} type - Event type name.\r\n         * @param {Any} value - Extra values for sending the binder function.\r\n         * @returns {undefined}\r\n         */\r\n        this.triggerHandler = function (element, type, value) {\r\n            var forms = (type.toString().split(' '))[0];\r\n            element.triggerHandler(value === true? forms : (forms + '.' + this.getIdentifier()), value);\r\n        };\r\n    };\r\n    return Helper;\r\n});"]}