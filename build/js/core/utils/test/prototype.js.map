{"version":3,"sources":["../../../../../src/js/core/utils/test/prototype.js"],"names":["path","require","assert","requirejs","describe","before","jsdom","$","global","jQuery","html","config","nodeRequire","baseUrl","join","__dirname","after","it","equal","mapping","hello","world","name","when","format","done","target","value","elementID","attr","error","hook","targetID"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,YAAYF,QAAQ,WAAR,CAAhB;;AAEAG,SAAS,6BAAT,EAAwC,YAAM;AAC1CC,WAAO,YAAW;AACd,aAAKC,KAAL,GAAaL,QAAQ,cAAR,GAAb;AACA,YAAIM,IAAIC,OAAOD,CAAP,GAAWC,OAAOC,MAAP,GAAgBR,QAAQ,QAAR,CAAnC;;AAEAM,UAAE,MAAF,EAAUG,IAAV;;AAKAP,kBAAUQ,MAAV,CAAiB;AACbC,yBAAaX,OADA;AAEbY,qBAASb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,IAArB;AAFI,SAAjB;AAIAZ,kBAAU,WAAV;AACH,KAdD;;AAgBAa,UAAM,YAAW;AACb,aAAKV,KAAL;AACH,KAFD;;AAIAF,aAAS,oCAAT,EAA+C,YAAM;AACjDa,WAAG,kCAAH,EAAuC,YAAM;AACzCf,mBAAOgB,KAAP,CAAa,kBAAkBC,OAAlB,CAA0B;AACnCC,uBAAO,OAD4B;AAEnCC,uBAAO;AAF4B,aAA1B,CAAb,EAGI,aAHJ;AAIH,SALD;;AAOAJ,WAAG,mIAAH,EAAwI,YAAM;AAC1If,mBAAOgB,KAAP,CAAa,sGAAsGC,OAAtG,CAA8G;AACvHG,sBAAM,WADiH;AAEvHC,sBAAM;AAFiH,aAA9G,CAAb,EAGI,8GAHJ;AAIH,SALD;AAMH,KAdD;;AAgBAnB,aAAS,mCAAT,EAA8C,YAAM;AAChDa,WAAG,kCAAH,EAAuC,YAAM;AACzCf,mBAAOgB,KAAP,CAAa,UAAUM,MAAV,CAAiB,CAAC,OAAD,EAAU,OAAV,CAAjB,CAAb,EAAmD,aAAnD;AACH,SAFD;;AAIAP,WAAG,8EAAH,EAAmF,YAAM;AACrFf,mBAAOgB,KAAP,CAAa,0CAA0CM,MAA1C,CAAiD,CAAC,YAAD,EAAe,QAAf,CAAjD,CAAb,EAAyF,yDAAzF;AACH,SAFD;AAGH,KARD;;AAUApB,aAAS,mCAAT,EAA8C,YAAM;AAChDa,WAAG,sCAAH,EAA2C,UAACQ,IAAD,EAAU;AACjD,aAAC,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACrB,oBAAIC,YAAY,KAAKC,IAAL,CAAU,IAAV,CAAhB;AACA,oBAAI;AACA3B,2BAAOgB,KAAP,CAAaU,SAAb,EAAwB,MAAxB;AACH,iBAFD,CAEE,OAAME,KAAN,EAAa;AACX,2BAAOL,KAAKK,KAAL,CAAP;AACH;;AAEDL;AACH,aATD,EASGM,IATH,CASQ,MATR;AAUH,SAXD;;AAaAd,WAAG,0CAAH,EAA+C,UAACQ,IAAD,EAAU;AACrD,aAAC,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACrB,oBAAIK,WAAWN,OAAOG,IAAP,CAAY,IAAZ,CAAf;AACA,oBAAI;AACA3B,2BAAOgB,KAAP,CAAac,QAAb,EAAuB,QAAvB;AACH,iBAFD,CAEE,OAAMF,KAAN,EAAa;AACX,2BAAOL,KAAKK,KAAL,CAAP;AACH;;AAEDL;AACH,aATD,EASGM,IATH,CASQ,MATR;AAUH,SAXD;;AAaAd,WAAG,iCAAH,EAAsC,UAACQ,IAAD,EAAU;AAC5C,aAAC,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACrB,oBAAI;AACAzB,2BAAOgB,KAAP,CAAaS,KAAb,EAAoB,IAApB;AACH,iBAFD,CAEE,OAAMG,KAAN,EAAa;AACX,2BAAOL,KAAKK,KAAL,CAAP;AACH;;AAEDL;AACH,aARD,EAQGM,IARH,CAQQ,MARR;AASH,SAVD;AAWH,KAtCD;AAuCH,CAtFD","file":"prototype.js","sourcesContent":["var path = require('path');\r\nvar assert = require('assert');\r\nvar requirejs = require('requirejs');\r\n\r\ndescribe('[core/utils/prototype] TEST', () => {\r\n    before(function() {\r\n        this.jsdom = require('jsdom-global')();\r\n        var $ = global.$ = global.jQuery = require('jquery');\r\n\r\n        $('body').html(`\r\n            <div id=\"test\" data-test=\"true\" data-pen=\"#target\">TEST</div>\r\n            <div id=\"target\">TARGET</div>\r\n        `);\r\n    \r\n        requirejs.config({\r\n            nodeRequire: require,\r\n            baseUrl: path.join(__dirname, '..')\r\n        });\r\n        requirejs('prototype');\r\n    });\r\n\r\n    after(function() {\r\n        this.jsdom();\r\n    });\r\n\r\n    describe('#1 String.prototype.mapping() TEST', () => {\r\n        it('@1 STRING MUST BE `Hello World`.', () => {\r\n            assert.equal('{hello} {world}'.mapping({\r\n                hello: 'Hello',\r\n                world: 'World'\r\n            }), 'Hello World');\r\n        });\r\n\r\n        it('@2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.', () => {\r\n            assert.equal('I think {name} is better than most modern framework ever, So I think you have to use {name} {when}!'.mapping({\r\n                name: 'Homeworks',\r\n                when: 'right now'\r\n            }), 'I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!');\r\n        });\r\n    });\r\n\r\n    describe('#2 String.prototype.format() TEST', () => {\r\n        it('@1 STRING MUST BE `Hello World`.', () => {\r\n            assert.equal('{0} {1}'.format(['Hello', 'World']), 'Hello World');\r\n        });\r\n\r\n        it('@2 STRING MUST BE `Government of the people, by the people, for the people`.', () => {\r\n            assert.equal('{0} of the {1}, by the {1}, for the {1}'.format(['Government', 'people']), 'Government of the people, by the people, for the people');\r\n        });\r\n    });\r\n\r\n    describe('#3 Function.prototype.hook() TEST', () => {\r\n        it('@1 BINDED ELEMENT ID MUST BE `test`.', (done) => {\r\n            (function(target, value) {\r\n                var elementID = this.attr('id');\r\n                try {\r\n                    assert.equal(elementID, 'test');\r\n                } catch(error) {\r\n                    return done(error);\r\n                }                    \r\n\r\n                done();\r\n            }).hook('test');\r\n        });\r\n\r\n        it('@2 TARGETED ELEMENT ID MUST BE `target`.', (done) => {\r\n            (function(target, value) {\r\n                var targetID = target.attr('id');\r\n                try {\r\n                    assert.equal(targetID, 'target');\r\n                } catch(error) {\r\n                    return done(error);\r\n                }                    \r\n\r\n                done();\r\n            }).hook('test');\r\n        });\r\n\r\n        it('@3 BINDED VALUE MUST BE `true`.', (done) => {\r\n            (function(target, value) {\r\n                try {\r\n                    assert.equal(value, true);\r\n                } catch(error) {\r\n                    return done(error);\r\n                }                    \r\n\r\n                done();\r\n            }).hook('test');\r\n        });\r\n    });\r\n});"]}