{
  "reportTitle": "homeworks",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 6,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2017-03-16T09:43:40.771Z",
    "end": "2017-03-16T09:43:40.900Z",
    "duration": 129,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "[core/utils/method] TEST",
        "suites": [
          {
            "title": "#1 method() TEST",
            "suites": [],
            "tests": [
              {
                "title": "@1 `component` METHOD DEFINITION.",
                "fullTitle": "[core/utils/method] TEST #1 method() TEST @1 `component` METHOD DEFINITION.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> method(<span class=\"hljs-string\">'component'</span>, {<br>    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, args</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> local = context.local;<br>        <span class=\"hljs-keyword\">var</span> global = context.global;<br>        <span class=\"hljs-keyword\">var</span> options = local._options;<br>        <br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._id, <span class=\"hljs-string\">'component'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL ID MUST BE `component`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._init, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT LOCAL INIT MUST BE `true`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(<span class=\"hljs-keyword\">typeof</span> local._prototype.init, <span class=\"hljs-string\">'function'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL PROTOTYPE MUST HAVE `init` function.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.key, <span class=\"hljs-string\">'value'</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS OF KEY MUST BE `value`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.deepEqual(options, $.extend(args, {<br>                msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>            }), <span class=\"hljs-string\">'COMPONENT LOCAL OPTIONS MATCH THE ARGUMENT THAT HOOK SAND.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.target.is($(<span class=\"hljs-string\">'#pen'</span>)), <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS.target MUST BE `pen` element.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.msg, <span class=\"hljs-string\">'Hello HOMEWORKS'</span>, <span class=\"hljs-string\">'COMPONENT GLOBAL OPTION KEY `msg` MUST BE `Hello HOMEWORKS`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        done();<br>    },<br>    options: {<br>        msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>    }<br>});<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> args = {<br>        target: target,<br>        key: <span class=\"hljs-string\">'value'</span><br>    };          <br>    <span class=\"hljs-keyword\">this</span>.component(args);<br>}).hook(<span class=\"hljs-string\">'component'</span>);",
                "isRoot": false,
                "uuid": "d144f2ec-b220-4ba5-99fd-81719fcbe457",
                "parentUUID": "1d8c7c89-5af0-4508-abd6-4e6faf605764",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\src\\js\\core\\utils\\test\\method.js",
            "uuid": "1d8c7c89-5af0-4508-abd6-4e6faf605764",
            "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\method.js",
            "passes": [
              {
                "title": "@1 `component` METHOD DEFINITION.",
                "fullTitle": "[core/utils/method] TEST #1 method() TEST @1 `component` METHOD DEFINITION.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">new</span> method(<span class=\"hljs-string\">'component'</span>, {<br>    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, args</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> local = context.local;<br>        <span class=\"hljs-keyword\">var</span> global = context.global;<br>        <span class=\"hljs-keyword\">var</span> options = local._options;<br>        <br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._id, <span class=\"hljs-string\">'component'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL ID MUST BE `component`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._init, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT LOCAL INIT MUST BE `true`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(<span class=\"hljs-keyword\">typeof</span> local._prototype.init, <span class=\"hljs-string\">'function'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL PROTOTYPE MUST HAVE `init` function.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.key, <span class=\"hljs-string\">'value'</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS OF KEY MUST BE `value`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.deepEqual(options, $.extend(args, {<br>                msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>            }), <span class=\"hljs-string\">'COMPONENT LOCAL OPTIONS MATCH THE ARGUMENT THAT HOOK SAND.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.target.is($(<span class=\"hljs-string\">'#pen'</span>)), <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS.target MUST BE `pen` element.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.msg, <span class=\"hljs-string\">'Hello HOMEWORKS'</span>, <span class=\"hljs-string\">'COMPONENT GLOBAL OPTION KEY `msg` MUST BE `Hello HOMEWORKS`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        done();<br>    },<br>    options: {<br>        msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>    }<br>});<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> args = {<br>        target: target,<br>        key: <span class=\"hljs-string\">'value'</span><br>    };          <br>    <span class=\"hljs-keyword\">this</span>.component(args);<br>}).hook(<span class=\"hljs-string\">'component'</span>);",
                "isRoot": false,
                "uuid": "d144f2ec-b220-4ba5-99fd-81719fcbe457",
                "parentUUID": "1d8c7c89-5af0-4508-abd6-4e6faf605764",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 11
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\src\\js\\core\\utils\\test\\method.js",
        "uuid": "aa4fa877-6ca6-42d5-8dcd-ca31e3e8acce",
        "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\method.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "[core/utils/prototype] TEST",
        "suites": [
          {
            "title": "#1 String.prototype.mapping() TEST",
            "suites": [],
            "tests": [
              {
                "title": "@1 STRING MUST BE `Hello World`.",
                "fullTitle": "[core/utils/prototype] TEST #1 String.prototype.mapping() TEST @1 STRING MUST BE `Hello World`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{hello} {world}'</span>.mapping({<br>    hello: <span class=\"hljs-string\">'Hello'</span>,<br>    world: <span class=\"hljs-string\">'World'</span><br>}), <span class=\"hljs-string\">'Hello World'</span>);",
                "isRoot": false,
                "uuid": "37e775a3-ee5e-4aad-b22f-9ea555862449",
                "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
                "skipped": false
              },
              {
                "title": "@2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
                "fullTitle": "[core/utils/prototype] TEST #1 String.prototype.mapping() TEST @2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'I think {name} is better than most modern framework ever, So I think you have to use {name} {when}!'</span>.mapping({<br>    name: <span class=\"hljs-string\">'Homeworks'</span>,<br>    when: <span class=\"hljs-string\">'right now'</span><br>}), <span class=\"hljs-string\">'I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!'</span>);",
                "isRoot": false,
                "uuid": "8b0c5323-a373-4095-b423-0e77a66bedcc",
                "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\src\\js\\core\\utils\\test\\prototype.js",
            "uuid": "d5a8003d-393b-405e-a08f-335e727e4555",
            "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\prototype.js",
            "passes": [
              {
                "title": "@1 STRING MUST BE `Hello World`.",
                "fullTitle": "[core/utils/prototype] TEST #1 String.prototype.mapping() TEST @1 STRING MUST BE `Hello World`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{hello} {world}'</span>.mapping({<br>    hello: <span class=\"hljs-string\">'Hello'</span>,<br>    world: <span class=\"hljs-string\">'World'</span><br>}), <span class=\"hljs-string\">'Hello World'</span>);",
                "isRoot": false,
                "uuid": "37e775a3-ee5e-4aad-b22f-9ea555862449",
                "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
                "skipped": false
              },
              {
                "title": "@2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
                "fullTitle": "[core/utils/prototype] TEST #1 String.prototype.mapping() TEST @2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'I think {name} is better than most modern framework ever, So I think you have to use {name} {when}!'</span>.mapping({<br>    name: <span class=\"hljs-string\">'Homeworks'</span>,<br>    when: <span class=\"hljs-string\">'right now'</span><br>}), <span class=\"hljs-string\">'I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!'</span>);",
                "isRoot": false,
                "uuid": "8b0c5323-a373-4095-b423-0e77a66bedcc",
                "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#2 String.prototype.format() TEST",
            "suites": [],
            "tests": [
              {
                "title": "@1 STRING MUST BE `Hello World`.",
                "fullTitle": "[core/utils/prototype] TEST #2 String.prototype.format() TEST @1 STRING MUST BE `Hello World`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{0} {1}'</span>.format([<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'World'</span>]), <span class=\"hljs-string\">'Hello World'</span>);",
                "isRoot": false,
                "uuid": "0e507a29-b28a-4b48-be3e-b1b431f82f7d",
                "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
                "skipped": false
              },
              {
                "title": "@2 STRING MUST BE `Government of the people, by the people, for the people`.",
                "fullTitle": "[core/utils/prototype] TEST #2 String.prototype.format() TEST @2 STRING MUST BE `Government of the people, by the people, for the people`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{0} of the {1}, by the {1}, for the {1}'</span>.format([<span class=\"hljs-string\">'Government'</span>, <span class=\"hljs-string\">'people'</span>]), <span class=\"hljs-string\">'Government of the people, by the people, for the people'</span>);",
                "isRoot": false,
                "uuid": "c3964d7b-8589-4836-a4d8-60bd77f92f79",
                "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\src\\js\\core\\utils\\test\\prototype.js",
            "uuid": "0814622d-33ba-449b-bf43-5121624b0cc3",
            "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\prototype.js",
            "passes": [
              {
                "title": "@1 STRING MUST BE `Hello World`.",
                "fullTitle": "[core/utils/prototype] TEST #2 String.prototype.format() TEST @1 STRING MUST BE `Hello World`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{0} {1}'</span>.format([<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'World'</span>]), <span class=\"hljs-string\">'Hello World'</span>);",
                "isRoot": false,
                "uuid": "0e507a29-b28a-4b48-be3e-b1b431f82f7d",
                "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
                "skipped": false
              },
              {
                "title": "@2 STRING MUST BE `Government of the people, by the people, for the people`.",
                "fullTitle": "[core/utils/prototype] TEST #2 String.prototype.format() TEST @2 STRING MUST BE `Government of the people, by the people, for the people`.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.equal(<span class=\"hljs-string\">'{0} of the {1}, by the {1}, for the {1}'</span>.format([<span class=\"hljs-string\">'Government'</span>, <span class=\"hljs-string\">'people'</span>]), <span class=\"hljs-string\">'Government of the people, by the people, for the people'</span>);",
                "isRoot": false,
                "uuid": "c3964d7b-8589-4836-a4d8-60bd77f92f79",
                "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#3 Function.prototype.hook() TEST",
            "suites": [],
            "tests": [
              {
                "title": "@1 BINDED ELEMENT ID MUST BE `test`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @1 BINDED ELEMENT ID MUST BE `test`.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> elementID = <span class=\"hljs-keyword\">this</span>.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(elementID, <span class=\"hljs-string\">'test'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "bbf975fc-2420-4bb2-aac6-2ed023c04fc1",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@2 TARGETED ELEMENT ID MUST BE `target`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @2 TARGETED ELEMENT ID MUST BE `target`.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> targetID = target.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(targetID, <span class=\"hljs-string\">'target'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "1748f30c-7279-42d8-af59-f930eec507b8",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@3 BINDED VALUE MUST BE `true`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @3 BINDED VALUE MUST BE `true`.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(value, <span class=\"hljs-literal\">true</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "56cb83d1-df2c-4d1a-ba49-18a925088f63",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@4 HOOK CALLBACK MUST NOT BE CALLED.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @4 HOOK CALLBACK MUST NOT BE CALLED.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-literal\">false</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        done(<span class=\"hljs-string\">'Component that own data be gave `false` must not be called.'</span>);<br>    }<br>    error = <span class=\"hljs-literal\">true</span>;<br>}).hook(<span class=\"hljs-string\">'test2'</span>, <span class=\"hljs-literal\">null</span>, (err) =&gt; {<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        <span class=\"hljs-keyword\">if</span>(err) {<br>            error = <span class=\"hljs-literal\">true</span>;<br>            done(err);<br>        } <span class=\"hljs-keyword\">else</span> {<br>            done();<br>        }<br>    }<br>});",
                "isRoot": false,
                "uuid": "435be656-d139-40a0-9e20-0028e393a5f6",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\src\\js\\core\\utils\\test\\prototype.js",
            "uuid": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
            "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\prototype.js",
            "passes": [
              {
                "title": "@1 BINDED ELEMENT ID MUST BE `test`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @1 BINDED ELEMENT ID MUST BE `test`.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> elementID = <span class=\"hljs-keyword\">this</span>.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(elementID, <span class=\"hljs-string\">'test'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "bbf975fc-2420-4bb2-aac6-2ed023c04fc1",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@2 TARGETED ELEMENT ID MUST BE `target`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @2 TARGETED ELEMENT ID MUST BE `target`.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> targetID = target.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(targetID, <span class=\"hljs-string\">'target'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "1748f30c-7279-42d8-af59-f930eec507b8",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@3 BINDED VALUE MUST BE `true`.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @3 BINDED VALUE MUST BE `true`.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(value, <span class=\"hljs-literal\">true</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
                "isRoot": false,
                "uuid": "56cb83d1-df2c-4d1a-ba49-18a925088f63",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              },
              {
                "title": "@4 HOOK CALLBACK MUST NOT BE CALLED.",
                "fullTitle": "[core/utils/prototype] TEST #3 Function.prototype.hook() TEST @4 HOOK CALLBACK MUST NOT BE CALLED.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-literal\">false</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        done(<span class=\"hljs-string\">'Component that own data be gave `false` must not be called.'</span>);<br>    }<br>    error = <span class=\"hljs-literal\">true</span>;<br>}).hook(<span class=\"hljs-string\">'test2'</span>, <span class=\"hljs-literal\">null</span>, (err) =&gt; {<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        <span class=\"hljs-keyword\">if</span>(err) {<br>            error = <span class=\"hljs-literal\">true</span>;<br>            done(err);<br>        } <span class=\"hljs-keyword\">else</span> {<br>            done();<br>        }<br>    }<br>});",
                "isRoot": false,
                "uuid": "435be656-d139-40a0-9e20-0028e393a5f6",
                "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\src\\js\\core\\utils\\test\\prototype.js",
        "uuid": "2b5c31cc-bd29-47bf-aca7-de8274e8962d",
        "fullFile": "C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\CampaignIntelligence\\CampaignIntelligence\\Content\\homeworks\\src\\js\\core\\utils\\test\\prototype.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 10000,
    "uuid": "d7a96c0d-a887-4a58-aad2-b8e87f97ce7a",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "@1 `component` METHOD DEFINITION.",
      "fullTitle": "#1 method() TEST @1 `component` METHOD DEFINITION.",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> method(<span class=\"hljs-string\">'component'</span>, {<br>    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, args</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> local = context.local;<br>        <span class=\"hljs-keyword\">var</span> global = context.global;<br>        <span class=\"hljs-keyword\">var</span> options = local._options;<br>        <br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._id, <span class=\"hljs-string\">'component'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL ID MUST BE `component`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._init, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT LOCAL INIT MUST BE `true`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(<span class=\"hljs-keyword\">typeof</span> local._prototype.init, <span class=\"hljs-string\">'function'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL PROTOTYPE MUST HAVE `init` function.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.key, <span class=\"hljs-string\">'value'</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS OF KEY MUST BE `value`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.deepEqual(options, $.extend(args, {<br>                msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>            }), <span class=\"hljs-string\">'COMPONENT LOCAL OPTIONS MATCH THE ARGUMENT THAT HOOK SAND.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.target.is($(<span class=\"hljs-string\">'#pen'</span>)), <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS.target MUST BE `pen` element.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.msg, <span class=\"hljs-string\">'Hello HOMEWORKS'</span>, <span class=\"hljs-string\">'COMPONENT GLOBAL OPTION KEY `msg` MUST BE `Hello HOMEWORKS`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        done();<br>    },<br>    options: {<br>        msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>    }<br>});<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> args = {<br>        target: target,<br>        key: <span class=\"hljs-string\">'value'</span><br>    };          <br>    <span class=\"hljs-keyword\">this</span>.component(args);<br>}).hook(<span class=\"hljs-string\">'component'</span>);",
      "isRoot": false,
      "uuid": "4b07d2a2-2e6b-44d0-900b-9aa13bc57f1c",
      "parentUUID": "1d8c7c89-5af0-4508-abd6-4e6faf605764",
      "skipped": false
    },
    {
      "title": "@1 STRING MUST BE `Hello World`.",
      "fullTitle": "#1 String.prototype.mapping() TEST @1 STRING MUST BE `Hello World`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{hello} {world}'</span>.mapping({<br>    hello: <span class=\"hljs-string\">'Hello'</span>,<br>    world: <span class=\"hljs-string\">'World'</span><br>}), <span class=\"hljs-string\">'Hello World'</span>);",
      "isRoot": false,
      "uuid": "6c0833f8-faa4-470d-bd05-d930bc008da2",
      "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
      "skipped": false
    },
    {
      "title": "@2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
      "fullTitle": "#1 String.prototype.mapping() TEST @2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'I think {name} is better than most modern framework ever, So I think you have to use {name} {when}!'</span>.mapping({<br>    name: <span class=\"hljs-string\">'Homeworks'</span>,<br>    when: <span class=\"hljs-string\">'right now'</span><br>}), <span class=\"hljs-string\">'I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!'</span>);",
      "isRoot": false,
      "uuid": "a2da669b-000b-4321-9e92-4703c9c293a9",
      "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
      "skipped": false
    },
    {
      "title": "@1 STRING MUST BE `Hello World`.",
      "fullTitle": "#2 String.prototype.format() TEST @1 STRING MUST BE `Hello World`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{0} {1}'</span>.format([<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'World'</span>]), <span class=\"hljs-string\">'Hello World'</span>);",
      "isRoot": false,
      "uuid": "29eebd44-52d8-40c8-99c9-f7cc791d9a91",
      "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
      "skipped": false
    },
    {
      "title": "@2 STRING MUST BE `Government of the people, by the people, for the people`.",
      "fullTitle": "#2 String.prototype.format() TEST @2 STRING MUST BE `Government of the people, by the people, for the people`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{0} of the {1}, by the {1}, for the {1}'</span>.format([<span class=\"hljs-string\">'Government'</span>, <span class=\"hljs-string\">'people'</span>]), <span class=\"hljs-string\">'Government of the people, by the people, for the people'</span>);",
      "isRoot": false,
      "uuid": "d3b68bf9-389a-41a4-a13b-ab2d2dacb7df",
      "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
      "skipped": false
    },
    {
      "title": "@1 BINDED ELEMENT ID MUST BE `test`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @1 BINDED ELEMENT ID MUST BE `test`.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> elementID = <span class=\"hljs-keyword\">this</span>.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(elementID, <span class=\"hljs-string\">'test'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "64589d70-81f2-4eb8-824a-e77e46242f27",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@2 TARGETED ELEMENT ID MUST BE `target`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @2 TARGETED ELEMENT ID MUST BE `target`.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> targetID = target.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(targetID, <span class=\"hljs-string\">'target'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "f020719d-a4e2-49f8-9b50-36a7948aadb3",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@3 BINDED VALUE MUST BE `true`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @3 BINDED VALUE MUST BE `true`.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(value, <span class=\"hljs-literal\">true</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "89bc5c57-30b5-40ce-8d21-85f43b01c6dc",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@4 HOOK CALLBACK MUST NOT BE CALLED.",
      "fullTitle": "#3 Function.prototype.hook() TEST @4 HOOK CALLBACK MUST NOT BE CALLED.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-literal\">false</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        done(<span class=\"hljs-string\">'Component that own data be gave `false` must not be called.'</span>);<br>    }<br>    error = <span class=\"hljs-literal\">true</span>;<br>}).hook(<span class=\"hljs-string\">'test2'</span>, <span class=\"hljs-literal\">null</span>, (err) =&gt; {<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        <span class=\"hljs-keyword\">if</span>(err) {<br>            error = <span class=\"hljs-literal\">true</span>;<br>            done(err);<br>        } <span class=\"hljs-keyword\">else</span> {<br>            done();<br>        }<br>    }<br>});",
      "isRoot": false,
      "uuid": "111e0b65-00cd-4cf0-83c3-ed5cc9b2839c",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "@1 `component` METHOD DEFINITION.",
      "fullTitle": "#1 method() TEST @1 `component` METHOD DEFINITION.",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">new</span> method(<span class=\"hljs-string\">'component'</span>, {<br>    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, args</span>) </span>{<br>        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>;<br>        <span class=\"hljs-keyword\">var</span> local = context.local;<br>        <span class=\"hljs-keyword\">var</span> global = context.global;<br>        <span class=\"hljs-keyword\">var</span> options = local._options;<br>        <br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._id, <span class=\"hljs-string\">'component'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL ID MUST BE `component`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(local._init, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT LOCAL INIT MUST BE `true`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(<span class=\"hljs-keyword\">typeof</span> local._prototype.init, <span class=\"hljs-string\">'function'</span>, <span class=\"hljs-string\">'COMPONENT LOCAL PROTOTYPE MUST HAVE `init` function.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.key, <span class=\"hljs-string\">'value'</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS OF KEY MUST BE `value`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.deepEqual(options, $.extend(args, {<br>                msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>            }), <span class=\"hljs-string\">'COMPONENT LOCAL OPTIONS MATCH THE ARGUMENT THAT HOOK SAND.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.target.is($(<span class=\"hljs-string\">'#pen'</span>)), <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'COMPONENT OPTIONS.target MUST BE `pen` element.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        <span class=\"hljs-keyword\">try</span> {<br>            assert.equal(options.msg, <span class=\"hljs-string\">'Hello HOMEWORKS'</span>, <span class=\"hljs-string\">'COMPONENT GLOBAL OPTION KEY `msg` MUST BE `Hello HOMEWORKS`.'</span>);<br>        } <span class=\"hljs-keyword\">catch</span>(error) {<br>            <span class=\"hljs-keyword\">return</span> done(error);<br>        }<br>        done();<br>    },<br>    options: {<br>        msg: <span class=\"hljs-string\">'Hello HOMEWORKS'</span><br>    }<br>});<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> args = {<br>        target: target,<br>        key: <span class=\"hljs-string\">'value'</span><br>    };          <br>    <span class=\"hljs-keyword\">this</span>.component(args);<br>}).hook(<span class=\"hljs-string\">'component'</span>);",
      "isRoot": false,
      "uuid": "7e3881ed-b7d5-4145-88c2-a6b70c427987",
      "parentUUID": "1d8c7c89-5af0-4508-abd6-4e6faf605764",
      "skipped": false
    },
    {
      "title": "@1 STRING MUST BE `Hello World`.",
      "fullTitle": "#1 String.prototype.mapping() TEST @1 STRING MUST BE `Hello World`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{hello} {world}'</span>.mapping({<br>    hello: <span class=\"hljs-string\">'Hello'</span>,<br>    world: <span class=\"hljs-string\">'World'</span><br>}), <span class=\"hljs-string\">'Hello World'</span>);",
      "isRoot": false,
      "uuid": "604313b5-c71c-414a-85f0-a60409270d66",
      "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
      "skipped": false
    },
    {
      "title": "@2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
      "fullTitle": "#1 String.prototype.mapping() TEST @2 STRING MUST BE `I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'I think {name} is better than most modern framework ever, So I think you have to use {name} {when}!'</span>.mapping({<br>    name: <span class=\"hljs-string\">'Homeworks'</span>,<br>    when: <span class=\"hljs-string\">'right now'</span><br>}), <span class=\"hljs-string\">'I think Homeworks is better than most modern framework ever, So I think you have to use Homeworks right now!'</span>);",
      "isRoot": false,
      "uuid": "99b679e1-c4d9-48b4-8f3c-77181a5c7323",
      "parentUUID": "d5a8003d-393b-405e-a08f-335e727e4555",
      "skipped": false
    },
    {
      "title": "@1 STRING MUST BE `Hello World`.",
      "fullTitle": "#2 String.prototype.format() TEST @1 STRING MUST BE `Hello World`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{0} {1}'</span>.format([<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'World'</span>]), <span class=\"hljs-string\">'Hello World'</span>);",
      "isRoot": false,
      "uuid": "6d4208a6-cd0a-423e-8d2c-93c5ffd53621",
      "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
      "skipped": false
    },
    {
      "title": "@2 STRING MUST BE `Government of the people, by the people, for the people`.",
      "fullTitle": "#2 String.prototype.format() TEST @2 STRING MUST BE `Government of the people, by the people, for the people`.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(<span class=\"hljs-string\">'{0} of the {1}, by the {1}, for the {1}'</span>.format([<span class=\"hljs-string\">'Government'</span>, <span class=\"hljs-string\">'people'</span>]), <span class=\"hljs-string\">'Government of the people, by the people, for the people'</span>);",
      "isRoot": false,
      "uuid": "410f0b8c-8c55-48cb-9600-76f066402df7",
      "parentUUID": "0814622d-33ba-449b-bf43-5121624b0cc3",
      "skipped": false
    },
    {
      "title": "@1 BINDED ELEMENT ID MUST BE `test`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @1 BINDED ELEMENT ID MUST BE `test`.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> elementID = <span class=\"hljs-keyword\">this</span>.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(elementID, <span class=\"hljs-string\">'test'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "7640f9ed-0cd6-4284-9714-1f59da78f9a5",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@2 TARGETED ELEMENT ID MUST BE `target`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @2 TARGETED ELEMENT ID MUST BE `target`.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> targetID = target.attr(<span class=\"hljs-string\">'id'</span>);<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(targetID, <span class=\"hljs-string\">'target'</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "3df841ad-a719-4fc3-bb37-47478d30b57f",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@3 BINDED VALUE MUST BE `true`.",
      "fullTitle": "#3 Function.prototype.hook() TEST @3 BINDED VALUE MUST BE `true`.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">try</span> {<br>        assert.equal(value, <span class=\"hljs-literal\">true</span>);<br>    } <span class=\"hljs-keyword\">catch</span>(error) {<br>        <span class=\"hljs-keyword\">return</span> done(error);<br>    }                    <br>    done();<br>}).hook(<span class=\"hljs-string\">'test'</span>);",
      "isRoot": false,
      "uuid": "cacbdc2c-8570-4f7a-933e-6fe2df044a0e",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    },
    {
      "title": "@4 HOOK CALLBACK MUST NOT BE CALLED.",
      "fullTitle": "#3 Function.prototype.hook() TEST @4 HOOK CALLBACK MUST NOT BE CALLED.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> error = <span class=\"hljs-literal\">false</span>;<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, value</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        done(<span class=\"hljs-string\">'Component that own data be gave `false` must not be called.'</span>);<br>    }<br>    error = <span class=\"hljs-literal\">true</span>;<br>}).hook(<span class=\"hljs-string\">'test2'</span>, <span class=\"hljs-literal\">null</span>, (err) =&gt; {<br>    <span class=\"hljs-keyword\">if</span> (error === <span class=\"hljs-literal\">false</span>) {<br>        <span class=\"hljs-keyword\">if</span>(err) {<br>            error = <span class=\"hljs-literal\">true</span>;<br>            done(err);<br>        } <span class=\"hljs-keyword\">else</span> {<br>            done();<br>        }<br>    }<br>});",
      "isRoot": false,
      "uuid": "e81fb9e8-8c43-4dd1-9b49-68d5d4e0ba43",
      "parentUUID": "286717bc-cad5-4a6e-867f-d7a4d27130ee",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}